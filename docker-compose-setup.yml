services:
  # Setup container that creates folder structure and config files
  setup:
    image: alpine:latest
    container_name: pangolin-setup
    volumes:
      - ./:/host-setup
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOMAIN=${DOMAIN:-}
      - EMAIL=${EMAIL:-}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-}
      - ADMIN_SUBDOMAIN=${ADMIN_SUBDOMAIN:-pangolin}
      - GITHUB_USER=${GITHUB_USER:-oidebrett}
      - GITHUB_REPO=${GITHUB_REPO:-getcontextware}
      - GITHUB_BRANCH=${GITHUB_BRANCH:-main}
      - CROWDSEC_ENROLLMENT_KEY=${CROWDSEC_ENROLLMENT_KEY:-}
    command: |
      sh -c "
        # This will be set to true to enable CrowdSec config setup only if you have provided a CROWDSEC_ENROLLMENT_KEY
        ENABLE_CROWDSEC=false
        if [ -n \"$CROWDSEC_ENROLLMENT_KEY\" ]; then
          echo 'Crowdsec Selected for setup ...'
          ENABLE_CROWDSEC=true
        fi        
        echo '🚀 Starting Pangolin setup container...'

        # Install required tools
        apk add --no-cache curl docker-cli openssl

        # Validate required environment variables
        if [ -z \"$$DOMAIN\" ] || [ -z \"$$EMAIL\" ] || [ -z \"$$ADMIN_PASSWORD\" ]; then
          echo '❌ Error: Required environment variables not set!'
          echo 'Usage: DOMAIN=example.com EMAIL=admin@example.com ADMIN_PASSWORD=mypassword docker compose -f docker-compose-setup.yml up'
          echo 'Required variables:'
          echo '  DOMAIN - Your domain name (e.g., example.com)'
          echo '  EMAIL - Email for Lets Encrypt certificates'
          echo '  ADMIN_PASSWORD - Admin password for Pangolin (min 8 chars)'
          echo 'Optional variables:'
          echo '  ADMIN_SUBDOMAIN - Subdomain for admin portal (default: pangolin)'
          exit 1
        fi

        # Check if config folder already exists
        if [ -d \"/host-setup/config\" ]; then
          echo '⚠️ Config folder already exists!'
          echo 'To avoid overwriting your configuration, setup will not proceed.'
          echo 'If you want to run setup again, please remove or rename the existing config folder.'
          exit 1
        fi

        # Validate domain format
        if ! echo \"$$DOMAIN\" | grep -E '^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '❌ Error: Invalid domain format'
          exit 1
        fi

        # Validate email format
        if ! echo \"$$EMAIL\" | grep -E '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$$' > /dev/null; then
          echo '❌ Error: Invalid email format'
          exit 1
        fi

        # Validate password length
        if [ $${#ADMIN_PASSWORD} -lt 8 ]; then
          echo '❌ Error: Password must be at least 8 characters long'
          exit 1
        fi

        echo '✅ Environment variables validated'

        # Download container setup script from GitHub
        echo '📥 Downloading setup script from GitHub...'
        BASE_URL=\"https://raw.githubusercontent.com/$$GITHUB_USER/$$GITHUB_REPO/$$GITHUB_BRANCH\"

        if ! curl -fsSL \"$$BASE_URL/container-setup.sh\" -o /container-setup.sh; then
          echo '❌ Failed to download setup script from GitHub'
          echo 'Make sure the repository exists and is accessible:'
          echo \"$$BASE_URL/container-setup.sh\"
          exit 1
        fi

        chmod +x /container-setup.sh
        echo '✅ Setup script downloaded'

        # Run the setup script
        echo '🔧 Running setup script...'
        /container-setup.sh

        # Create docker-compose.yml for services
        echo '📝 Creating docker-compose.yml for services...'
        cat > /host-setup/docker-compose.yml << 'EOF'
        services:
          # Main Pangolin application
          pangolin:
            image: fosrl/pangolin:1.5.0
            container_name: pangolin
            restart: unless-stopped
            volumes:
              - ./config:/app/config
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
              interval: "3s"
              timeout: "3s"
              retries: 15

          # Gerbil WireGuard management
          gerbil:
            image: fosrl/gerbil:1.0.0
            container_name: gerbil
            restart: unless-stopped
            depends_on:
              pangolin:
                condition: service_healthy
            command:
              - --reachableAt=http://gerbil:3003
              - --generateAndSaveKeyTo=/var/config/key
              - --remoteConfig=http://pangolin:3001/api/v1/gerbil/get-config
              - --reportBandwidthTo=http://pangolin:3001/api/v1/gerbil/receive-bandwidth
            volumes:
              - ./config/:/var/config
            cap_add:
              - NET_ADMIN
              - SYS_MODULE
            ports:
              - 51820:51820/udp
              - 443:443 # Port for traefik because of the network_mode
              - 80:80 # Port for traefik because of the network_mode

          # Traefik reverse proxy
          traefik:
            image: traefik:v3.4.0
            container_name: traefik
            restart: unless-stopped
            network_mode: service:gerbil # Ports appear on the gerbil service
            depends_on:
              pangolin:
                condition: service_healthy
            command:
              - --configFile=/etc/traefik/traefik_config.yml
            volumes:
              - ./config/traefik:/etc/traefik:ro # Volume to store the Traefik configuration
              - ./config/letsencrypt:/letsencrypt # Volume to store the Lets Encrypt certificates
      EOF

        # Part 2: Conditionally append CrowdSec if CROWDSEC_ENROLLMENT_KEY is set
        if [ -n \"$CROWDSEC_ENROLLMENT_KEY\" ]; then
          echo '🛡️ Adding CrowdSec configuration...'
          cat >> /host-setup/docker-compose.yml << EOF

            crowdsec:
              command: -t
              container_name: crowdsec
              environment:
                ACQUIRE_FILES: /var/log/traefik/*.log
                COLLECTIONS: crowdsecurity/traefik crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules crowdsecurity/linux
                ENROLL_INSTANCE_NAME: pangolin-crowdsec
                ENROLL_TAGS: docker
                ENROLL_KEY: "$$CROWDSEC_ENROLLMENT_KEY"
                GID: "1000"
                PARSERS: crowdsecurity/whitelists
              healthcheck:
                test: [ "CMD", "cscli", "capi", "status" ]
              image: crowdsecurity/crowdsec:latest
              depends_on:
                - gerbil  
              labels:
                - traefik.enable=false
              ports:
                - 8080:8080
                - 6060:6060
              expose:
                - 8080
                - 6060
                - 7422
              restart: unless-stopped
              volumes:
                - ./config/crowdsec:/etc/crowdsec
                - ./config/crowdsec/db:/var/lib/crowdsec/data
                - ./config/crowdsec_logs/auth.log:/var/log/auth.log:ro
                - ./config/crowdsec_logs/syslog:/var/log/syslog:ro
                - ./config/crowdsec_logs:/var/log
                - ./config/traefik/logs:/var/log/traefik
                - ./config/traefik/conf/captcha.html:/etc/traefik/conf/captcha.html
      EOF

        fi

        # Append network block (always)
        cat >> /host-setup/docker-compose.yml << EOF

          networks:
            default:
              external: true
              name: pangolin
      EOF
      
        echo '✅ Setup completed! The stack is ready to start.'
        echo '📊 Start your services with: docker compose up -d'
        echo '🌐 Access at: https://'"$$ADMIN_SUBDOMAIN"'.'"$$DOMAIN"
        echo '👤 Admin login: admin@'"$$DOMAIN"

        # Keep container running briefly to show completion message
        sleep 5

      "
    restart: "no"
